title: "Bitrise Wait for Build"
summary: "The Step pauses the current build until another running build is finished."
description: |-
   The Step pauses the current build until another running build or builds are finished. The Step checks statuses of the builds defined in the Step. The builds are defined in the **Build slugs** input: you can add these slugs manually but the typical use case is to use the Environment Variable exported by the **Bitrise Start Build** Step. 

   As long as the builds defined by the slugs are running, the Step will hold the build it is running in. The build will fail if any of the builds included in the Step fail.
   
   ### Configuring the Step 
   
   Before you run a build with this Step, make sure you have your Personal Access Token stored in a [Secret Environment Variable](https://devcenter.bitrise.io/builds/env-vars-secret-env-vars/#adding-a-secret-env-var).
   
   This Step is generally used in combination with the **Bitrise Start Build** Step which starts other builds in parallel with the current one. The build that triggered the parallel builds needs to wait for those builds to finish in order to report a successful or a failed build: this Step ensures the build is on hold until the other builds are finished.
   
    1. Set up at least two Workflows in the Workflow Editor: one will contain the Step, the other will be triggered by the Step. 
       You can set up as many Workflows as you wish: your number of concurrencies limit the number of Workflows you can run simultaneously.
    2. Add the **Bitrise Start Build** Step to the part of the Workflow where you want to trigger another build. 
    3. Add the Secret Env Var storing your Personal Access Token to the **Bitrise Access Token** input of the **Bitrise Start Build** Step: click the **Select secret variable** button, and choose the key you created.
    4. Find the **Workflows** input of the **Bitrise Start Build** Step, and add the Workflow(s) you want to run. 
    5. In the **Environments to share** input, add Environment Variables (Env Vars) that you want to share between the builds triggered by the Step.
    6. Optionally, you can add any Step you would like to run in parallel while the triggered Workflow(s) are running in the parent Workflow.
    7. Add the **Bitrise Wait for Build** Step to the end of Workflow that contains the **Bitrise Start Build** Step. 
    8. Add the Secret Env Var storing your Personal Access Token to the **Bitrise Access Token** input of the **Bitrise Wait for Build** Step: click the **Select secret variable** button, and choose the key you created.
    9. In the **Build slugs** input, define the builds for the Step. 
       The build slugs you need are stored by the **Bitrise Start Build** Step in the `$ROUTER_STARTED_BUILD_SLUGS` Env Var. As long as the builds defined by the slugs are running, the Step will hold the build it is running in. The build will fail if any of the builds included in the Step fail.
    10. Optionally, you can save the build artifacts from the builds and configure the Step to abort all builds if any of the builds fail:
       - In **The path of the build artifacts** input, set where you'd like to save the artifacts. 
       - Set the **Abort all builds if one fails** input to either `yes` or `no`.
    
    ### Troubleshooting 
 
    - Make sure you have both the **Bitrise Start Build** and the **Bitrise Wait for Build** Steps in the right place in your initial Workflow. 
    - Your Personal Access Token can expire! Make sure it's still valid - without it, you can't start new builds with this Step. 
 
    ### Useful links 
 
    - [Starting parallel builds with a single Workflow](https://devcenter.bitrise.io/builds/triggering-builds/trigger-multiple-workflows/)
    - [Start builds from a parent Workflow](https://devcenter.bitrise.io/en/steps-and-workflows/generic-workflow-recipes/start--parallel--builds-from-the-workflow.html)
 
    ### Related Steps 
 
    - [Bitrise Start Build](https://www.bitrise.io/integrations/steps/build-router-start)
    - [Bitrise Run](https://www.bitrise.io/integrations/steps/bitrise-run)
    - [Build Status Change](https://www.bitrise.io/integrations/steps/build-status-change)
 
website: https://github.com/bitrise-steplib/bitrise-step-build-router-wait
source_code_url: https://github.com/bitrise-steplib/bitrise-step-build-router-wait
support_url: https://github.com/bitrise-steplib/bitrise-step-build-router-wait/issues
host_os_tags:
  - osx-10.10
  - ubuntu-16.04
type_tags:
  - utility

is_always_run: true
is_skippable: false

toolkit:
  go:
    package_name: github.com/bitrise-steplib/bitrise-step-build-router-wait

inputs:
  - access_token:
    opts:
      title: Bitrise Access Token
      summary: Your Personal Access Token
      description: |
          Your Personal Access Token
          
          To acquire a Personal Access Token for your user, sign in with that user on [bitrise.io](https://bitrise.io),  
          go to your **Account settings** page, and select the [**Security** tab](https://www.bitrise.io/me/profile#/security) on the left side.
      is_required: true
      is_sensitive: true
  - buildslugs: $ROUTER_STARTED_BUILD_SLUGS
    opts:
      title: Build slugs
      summary: The build slug(s) to check. One build slug per line.
      description: The build slug(s) to check. One build slug per line. We recommend using the $ROUTER_STARTED_BUILD_SLUGS Env Var exported by the **Bitrise Start Build** Step. 
      is_required: true
  - build_artifacts_save_path:
    opts:
      title: The path of the build artifacts
      summary: The provided path is where Bitrise will save your build artifacts.
      description: |
          The provided path is where Bitrise will save your build artifacts so you can access them in the Workflow. Leave it empty if you don't want to save artifacts.
      is_required: false
      is_sensitive: false
  - abort_on_fail: "no"
    opts:
      title: Abort all builds if one fails
      description: |-
        Abort all started builds if any of the builds fails.
      is_required: true
      is_sensitive: false
      value_options:
        - "yes"
        - "no"
  - verbose: "no"
    opts:
      title: Enable verbose log?
      description: |-
        You can enable the verbose log for easier debugging.
      is_required: true
      value_options:
        - "yes"
        - "no"
